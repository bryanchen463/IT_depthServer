// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: pub.proto

package pub

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExchangeID int32

const (
	ExchangeID_INVALID      ExchangeID = 0
	ExchangeID_BINANCEID    ExchangeID = 1
	ExchangeID_OKEXID       ExchangeID = 3
	ExchangeID_COINBASEID   ExchangeID = 4
	ExchangeID_COINEX       ExchangeID = 5
	ExchangeID_BYBIT        ExchangeID = 6
	ExchangeID_ETHEREUMDEX  ExchangeID = 7
	ExchangeID_KRAKEN       ExchangeID = 8
	ExchangeID_MOCKEXCHANGE ExchangeID = 9
)

// Enum value maps for ExchangeID.
var (
	ExchangeID_name = map[int32]string{
		0: "INVALID",
		1: "BINANCEID",
		3: "OKEXID",
		4: "COINBASEID",
		5: "COINEX",
		6: "BYBIT",
		7: "ETHEREUMDEX",
		8: "KRAKEN",
		9: "MOCKEXCHANGE",
	}
	ExchangeID_value = map[string]int32{
		"INVALID":      0,
		"BINANCEID":    1,
		"OKEXID":       3,
		"COINBASEID":   4,
		"COINEX":       5,
		"BYBIT":        6,
		"ETHEREUMDEX":  7,
		"KRAKEN":       8,
		"MOCKEXCHANGE": 9,
	}
)

func (x ExchangeID) Enum() *ExchangeID {
	p := new(ExchangeID)
	*p = x
	return p
}

func (x ExchangeID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeID) Descriptor() protoreflect.EnumDescriptor {
	return file_pub_proto_enumTypes[0].Descriptor()
}

func (ExchangeID) Type() protoreflect.EnumType {
	return &file_pub_proto_enumTypes[0]
}

func (x ExchangeID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeID.Descriptor instead.
func (ExchangeID) EnumDescriptor() ([]byte, []int) {
	return file_pub_proto_rawDescGZIP(), []int{0}
}

type Channel int32

const (
	Channel_BookTick           Channel = 0
	Channel_Depth              Channel = 1
	Channel_Tick               Channel = 2
	Channel_KlineWs            Channel = 3
	Channel_TradeWs            Channel = 4
	Channel_FutureBookTick     Channel = 5
	Channel_FutureDepth        Channel = 6
	Channel_FutureTick         Channel = 7
	Channel_MarkPrice          Channel = 8
	Channel_FutureKlineWs      Channel = 9
	Channel_FutureAggTrade     Channel = 10
	Channel_CoinFutureBookTick Channel = 11
	Channel_DexBookTicks       Channel = 12
	Channel_DexTrades          Channel = 13
	Channel_Snap               Channel = 14 // forbidden to subscribe, only for push
)

// Enum value maps for Channel.
var (
	Channel_name = map[int32]string{
		0:  "BookTick",
		1:  "Depth",
		2:  "Tick",
		3:  "KlineWs",
		4:  "TradeWs",
		5:  "FutureBookTick",
		6:  "FutureDepth",
		7:  "FutureTick",
		8:  "MarkPrice",
		9:  "FutureKlineWs",
		10: "FutureAggTrade",
		11: "CoinFutureBookTick",
		12: "DexBookTicks",
		13: "DexTrades",
		14: "Snap",
	}
	Channel_value = map[string]int32{
		"BookTick":           0,
		"Depth":              1,
		"Tick":               2,
		"KlineWs":            3,
		"TradeWs":            4,
		"FutureBookTick":     5,
		"FutureDepth":        6,
		"FutureTick":         7,
		"MarkPrice":          8,
		"FutureKlineWs":      9,
		"FutureAggTrade":     10,
		"CoinFutureBookTick": 11,
		"DexBookTicks":       12,
		"DexTrades":          13,
		"Snap":               14,
	}
)

func (x Channel) Enum() *Channel {
	p := new(Channel)
	*p = x
	return p
}

func (x Channel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Channel) Descriptor() protoreflect.EnumDescriptor {
	return file_pub_proto_enumTypes[1].Descriptor()
}

func (Channel) Type() protoreflect.EnumType {
	return &file_pub_proto_enumTypes[1]
}

func (x Channel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Channel.Descriptor instead.
func (Channel) EnumDescriptor() ([]byte, []int) {
	return file_pub_proto_rawDescGZIP(), []int{1}
}

type SubReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange ExchangeID `protobuf:"varint,1,opt,name=exchange,proto3,enum=ExchangeID" json:"exchange,omitempty"`
	Symbol   string     `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Channel  Channel    `protobuf:"varint,3,opt,name=channel,proto3,enum=Channel" json:"channel,omitempty"`
	Url      string     `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Args     string     `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *SubReq) Reset() {
	*x = SubReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubReq) ProtoMessage() {}

func (x *SubReq) ProtoReflect() protoreflect.Message {
	mi := &file_pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubReq.ProtoReflect.Descriptor instead.
func (*SubReq) Descriptor() ([]byte, []int) {
	return file_pub_proto_rawDescGZIP(), []int{0}
}

func (x *SubReq) GetExchange() ExchangeID {
	if x != nil {
		return x.Exchange
	}
	return ExchangeID_INVALID
}

func (x *SubReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubReq) GetChannel() Channel {
	if x != nil {
		return x.Channel
	}
	return Channel_BookTick
}

func (x *SubReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SubReq) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

type SubRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *SubRsp) Reset() {
	*x = SubRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubRsp) ProtoMessage() {}

func (x *SubRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubRsp.ProtoReflect.Descriptor instead.
func (*SubRsp) Descriptor() ([]byte, []int) {
	return file_pub_proto_rawDescGZIP(), []int{1}
}

func (x *SubRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SubRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UnsubReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange ExchangeID `protobuf:"varint,1,opt,name=exchange,proto3,enum=ExchangeID" json:"exchange,omitempty"`
	Symbol   string     `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Channel  Channel    `protobuf:"varint,3,opt,name=channel,proto3,enum=Channel" json:"channel,omitempty"`
	Url      string     `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Args     string     `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *UnsubReq) Reset() {
	*x = UnsubReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubReq) ProtoMessage() {}

func (x *UnsubReq) ProtoReflect() protoreflect.Message {
	mi := &file_pub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubReq.ProtoReflect.Descriptor instead.
func (*UnsubReq) Descriptor() ([]byte, []int) {
	return file_pub_proto_rawDescGZIP(), []int{2}
}

func (x *UnsubReq) GetExchange() ExchangeID {
	if x != nil {
		return x.Exchange
	}
	return ExchangeID_INVALID
}

func (x *UnsubReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UnsubReq) GetChannel() Channel {
	if x != nil {
		return x.Channel
	}
	return Channel_BookTick
}

func (x *UnsubReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UnsubReq) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

type UnsubRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UnsubRsp) Reset() {
	*x = UnsubRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubRsp) ProtoMessage() {}

func (x *UnsubRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubRsp.ProtoReflect.Descriptor instead.
func (*UnsubRsp) Descriptor() ([]byte, []int) {
	return file_pub_proto_rawDescGZIP(), []int{3}
}

func (x *UnsubRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UnsubRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PushMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeessageType uint32 `protobuf:"varint,1,opt,name=meessageType,proto3" json:"meessageType,omitempty"`
	Data         []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PushMsg) Reset() {
	*x = PushMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMsg) ProtoMessage() {}

func (x *PushMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMsg.ProtoReflect.Descriptor instead.
func (*PushMsg) Descriptor() ([]byte, []int) {
	return file_pub_proto_rawDescGZIP(), []int{4}
}

func (x *PushMsg) GetMeessageType() uint32 {
	if x != nil {
		return x.MeessageType
	}
	return 0
}

func (x *PushMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_pub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_pub_proto_rawDescGZIP(), []int{5}
}

func (x *HeartBeat) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// Types that are assignable to Req:
	//
	//	*Req_Sub
	//	*Req_Unsub
	//	*Req_Heartbeat
	Req isReq_Req `protobuf_oneof:"req"`
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_pub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_pub_proto_rawDescGZIP(), []int{6}
}

func (x *Req) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (m *Req) GetReq() isReq_Req {
	if m != nil {
		return m.Req
	}
	return nil
}

func (x *Req) GetSub() *SubReq {
	if x, ok := x.GetReq().(*Req_Sub); ok {
		return x.Sub
	}
	return nil
}

func (x *Req) GetUnsub() *UnsubReq {
	if x, ok := x.GetReq().(*Req_Unsub); ok {
		return x.Unsub
	}
	return nil
}

func (x *Req) GetHeartbeat() *HeartBeat {
	if x, ok := x.GetReq().(*Req_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

type isReq_Req interface {
	isReq_Req()
}

type Req_Sub struct {
	Sub *SubReq `protobuf:"bytes,2,opt,name=sub,proto3,oneof"`
}

type Req_Unsub struct {
	Unsub *UnsubReq `protobuf:"bytes,3,opt,name=unsub,proto3,oneof"`
}

type Req_Heartbeat struct {
	Heartbeat *HeartBeat `protobuf:"bytes,4,opt,name=heartbeat,proto3,oneof"`
}

func (*Req_Sub) isReq_Req() {}

func (*Req_Unsub) isReq_Req() {}

func (*Req_Heartbeat) isReq_Req() {}

type Rsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq uint32 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// Types that are assignable to Rsp:
	//
	//	*Rsp_Sub
	//	*Rsp_Unsub
	//	*Rsp_Push
	//	*Rsp_Heartbeat
	Rsp isRsp_Rsp `protobuf_oneof:"rsp"`
}

func (x *Rsp) Reset() {
	*x = Rsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rsp) ProtoMessage() {}

func (x *Rsp) ProtoReflect() protoreflect.Message {
	mi := &file_pub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rsp.ProtoReflect.Descriptor instead.
func (*Rsp) Descriptor() ([]byte, []int) {
	return file_pub_proto_rawDescGZIP(), []int{7}
}

func (x *Rsp) GetSeq() uint32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (m *Rsp) GetRsp() isRsp_Rsp {
	if m != nil {
		return m.Rsp
	}
	return nil
}

func (x *Rsp) GetSub() *SubRsp {
	if x, ok := x.GetRsp().(*Rsp_Sub); ok {
		return x.Sub
	}
	return nil
}

func (x *Rsp) GetUnsub() *UnsubRsp {
	if x, ok := x.GetRsp().(*Rsp_Unsub); ok {
		return x.Unsub
	}
	return nil
}

func (x *Rsp) GetPush() *PushMsg {
	if x, ok := x.GetRsp().(*Rsp_Push); ok {
		return x.Push
	}
	return nil
}

func (x *Rsp) GetHeartbeat() *HeartBeat {
	if x, ok := x.GetRsp().(*Rsp_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

type isRsp_Rsp interface {
	isRsp_Rsp()
}

type Rsp_Sub struct {
	Sub *SubRsp `protobuf:"bytes,2,opt,name=sub,proto3,oneof"`
}

type Rsp_Unsub struct {
	Unsub *UnsubRsp `protobuf:"bytes,3,opt,name=unsub,proto3,oneof"`
}

type Rsp_Push struct {
	Push *PushMsg `protobuf:"bytes,4,opt,name=push,proto3,oneof"`
}

type Rsp_Heartbeat struct {
	Heartbeat *HeartBeat `protobuf:"bytes,5,opt,name=heartbeat,proto3,oneof"`
}

func (*Rsp_Sub) isRsp_Rsp() {}

func (*Rsp_Unsub) isRsp_Rsp() {}

func (*Rsp_Push) isRsp_Rsp() {}

func (*Rsp_Heartbeat) isRsp_Rsp() {}

var File_pub_proto protoreflect.FileDescriptor

var file_pub_proto_rawDesc = []byte{
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x06,
	0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x2e, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x52, 0x65, 0x71, 0x12, 0x27,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x22, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x08, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x30, 0x0a, 0x08, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x41, 0x0a, 0x07, 0x50,
	0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29,
	0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8a, 0x01, 0x0a, 0x03, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x03, 0x73, 0x75, 0x62,
	0x12, 0x21, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e,
	0x73, 0x75, 0x62, 0x12, 0x2a, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42,
	0x05, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x22, 0xaa, 0x01, 0x0a, 0x03, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x71,
	0x12, 0x1b, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x53, 0x75, 0x62, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x21, 0x0a,
	0x05, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x52, 0x73, 0x70, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x75, 0x62,
	0x12, 0x1e, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x50, 0x75, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68,
	0x12, 0x2a, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x05, 0x0a, 0x03,
	0x72, 0x73, 0x70, 0x2a, 0x8a, 0x01, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x4f, 0x4b, 0x45, 0x58, 0x49, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x49, 0x4e, 0x42, 0x41, 0x53, 0x45, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f,
	0x49, 0x4e, 0x45, 0x58, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x42, 0x49, 0x54, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x44, 0x45, 0x58,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x52, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x4f, 0x43, 0x4b, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x09,
	0x2a, 0xf4, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0c, 0x0a, 0x08,
	0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x69, 0x63, 0x6b, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x73, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x57, 0x73, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x08, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x73, 0x10, 0x09,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x65, 0x78, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x10, 0x0c, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x65, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x10, 0x0d, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x6e, 0x61, 0x70, 0x10, 0x0e, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x79, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x6e, 0x34,
	0x36, 0x33, 0x2f, 0x49, 0x54, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x70, 0x75, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pub_proto_rawDescOnce sync.Once
	file_pub_proto_rawDescData = file_pub_proto_rawDesc
)

func file_pub_proto_rawDescGZIP() []byte {
	file_pub_proto_rawDescOnce.Do(func() {
		file_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_pub_proto_rawDescData)
	})
	return file_pub_proto_rawDescData
}

var file_pub_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pub_proto_goTypes = []interface{}{
	(ExchangeID)(0),   // 0: ExchangeID
	(Channel)(0),      // 1: Channel
	(*SubReq)(nil),    // 2: SubReq
	(*SubRsp)(nil),    // 3: SubRsp
	(*UnsubReq)(nil),  // 4: UnsubReq
	(*UnsubRsp)(nil),  // 5: UnsubRsp
	(*PushMsg)(nil),   // 6: PushMsg
	(*HeartBeat)(nil), // 7: HeartBeat
	(*Req)(nil),       // 8: Req
	(*Rsp)(nil),       // 9: Rsp
}
var file_pub_proto_depIdxs = []int32{
	0,  // 0: SubReq.exchange:type_name -> ExchangeID
	1,  // 1: SubReq.channel:type_name -> Channel
	0,  // 2: UnsubReq.exchange:type_name -> ExchangeID
	1,  // 3: UnsubReq.channel:type_name -> Channel
	2,  // 4: Req.sub:type_name -> SubReq
	4,  // 5: Req.unsub:type_name -> UnsubReq
	7,  // 6: Req.heartbeat:type_name -> HeartBeat
	3,  // 7: Rsp.sub:type_name -> SubRsp
	5,  // 8: Rsp.unsub:type_name -> UnsubRsp
	6,  // 9: Rsp.push:type_name -> PushMsg
	7,  // 10: Rsp.heartbeat:type_name -> HeartBeat
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_pub_proto_init() }
func file_pub_proto_init() {
	if File_pub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pub_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pub_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Req_Sub)(nil),
		(*Req_Unsub)(nil),
		(*Req_Heartbeat)(nil),
	}
	file_pub_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Rsp_Sub)(nil),
		(*Rsp_Unsub)(nil),
		(*Rsp_Push)(nil),
		(*Rsp_Heartbeat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pub_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pub_proto_goTypes,
		DependencyIndexes: file_pub_proto_depIdxs,
		EnumInfos:         file_pub_proto_enumTypes,
		MessageInfos:      file_pub_proto_msgTypes,
	}.Build()
	File_pub_proto = out.File
	file_pub_proto_rawDesc = nil
	file_pub_proto_goTypes = nil
	file_pub_proto_depIdxs = nil
}
